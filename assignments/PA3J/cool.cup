/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {:

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:}

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features features;
nonterminal Feature feature;
nonterminal Expression expr;
nonterminal Expressions block_expr_list;
nonterminal branch branch;
nonterminal Cases branches;
nonterminal Formals formals;
nonterminal formalc formal;
nonterminal let let;
nonterminal Expressions actual;

/* Cool Manual 11.1 Precedence */
/* TODO Do the prefix unary operations even need associativity? */
precedence right ASSIGN;
precedence nonassoc NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence nonassoc ISVOID;
precedence nonassoc NEG;
precedence nonassoc AT;
precedence nonassoc DOT;

program
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE features:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n,
		                   AbstractTable.idtable.addString("Object"),
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE features:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| CLASS error SEMI
	;

/* Feature list may be empty, but no empty features in list. */
features
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	/* one */
	| feature:f
	    {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	/* many */
	| features:fl feature:f
	    {: RESULT = fl.appendElement(f); :}
	;

feature
	/* attribute without initializing expression */
	::= OBJECTID:n COLON TYPEID:t SEMI
	    {: RESULT = new attr(curr_lineno(), n, t, new no_expr(curr_lineno())); :}
	/* attribute with initializing expression */
	| OBJECTID:n COLON TYPEID:t ASSIGN expr:e SEMI
	    {: RESULT = new attr(curr_lineno(), n, t, e); :}
	/* method */
	| OBJECTID:o LPAREN formals:fs RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI
	    {: RESULT = new method(curr_lineno(), o, fs, t, e); :}
	;
	/* TODO error if attribute and method use TYPEID, recover after SEMI */

formals
	::= /* empty */
	    {: RESULT = new Formals(curr_lineno()); :}
	/* one */
	| formal:f
	    {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	/* many */
	| formals:fl COMMA formal:f
	    {: RESULT = fl.appendElement(f); :}
	;

formal
	::= OBJECTID:o COLON TYPEID:t
	    {: RESULT = new formalc(curr_lineno(), o, t); :}
	;

expr
	::= BOOL_CONST:e
	    {: RESULT = new bool_const(curr_lineno(), e); :}
	| STR_CONST:e
	    {: RESULT = new string_const(curr_lineno(), e); :}
	| INT_CONST:e
	    {: RESULT = new int_const(curr_lineno(), e); :}
	| OBJECTID:e
	    {: RESULT = new object(curr_lineno(), e); :}
	| LPAREN expr:e RPAREN
	    {: RESULT = e; :}
	/* TODO double check I am using the correct type for not and ~ (which are the boolean and int complement) */
	| NOT expr:e
	    {: RESULT = new neg(curr_lineno(), e); :}
	| expr:e1 EQ expr:e2
	    {: RESULT = new eq(curr_lineno(), e1, e2); :}
	| expr:e1 LE expr:e2
	    {: RESULT = new leq(curr_lineno(), e1, e2); :}
	| expr:e1 LT expr:e2
	    {: RESULT = new lt(curr_lineno(), e1, e2); :}
	| NEG expr:e
	    {: RESULT = new comp(curr_lineno(), e); :}
	| expr:e1 DIV expr:e2
	    {: RESULT = new divide(curr_lineno(), e1, e2); :}
	| expr:e1 MINUS expr:e2
	    {: RESULT = new sub(curr_lineno(), e1, e2); :}
	| expr:e1 PLUS expr:e2
	    {: RESULT = new plus(curr_lineno(), e1, e2); :}
	| expr:e1 MULT expr:e2
	    {: RESULT = new mul(curr_lineno(), e1, e2); :}
	| ISVOID expr:e
	    {: RESULT = new isvoid(curr_lineno(), e); :}
	| NEW TYPEID:t
	    {: RESULT = new new_(curr_lineno(), t); :}
	| LBRACE block_expr_list:el RBRACE
	    {: RESULT = new block(curr_lineno(), el); :}
	| CASE expr:e OF branches:bs ESAC
	    {: RESULT = new typcase(curr_lineno(), e, bs); :}
	| LET let:l
	    {: RESULT = l; :}
	| WHILE expr:p LOOP expr:b POOL
	    {: RESULT = new loop(curr_lineno(), p, b); :}
	| IF expr:p THEN expr:t ELSE expr:e FI
	    {: RESULT = new cond(curr_lineno(), p, t, e); :}
	| expr:e AT TYPEID:t DOT OBJECTID:o LPAREN actual:a RPAREN
	    {: RESULT = new static_dispatch(curr_lineno(), e, t, o, a); :}
	| expr:e DOT OBJECTID:o LPAREN actual:a RPAREN
	    {: RESULT = new dispatch(curr_lineno(), e, o, a); :}
	| OBJECTID:o LPAREN actual:a RPAREN
	    {: RESULT = new dispatch(curr_lineno(), new no_expr(curr_lineno()), o, a); :}
	| OBJECTID:n ASSIGN expr:e
	    {: RESULT = new assign(curr_lineno(), n, e); :}
	;

let
	/* let without initializing expression */
	::= OBJECTID:n COLON TYPEID:t COMMA let:l
	    {: RESULT = new let(curr_lineno(), n, t, new no_expr(curr_lineno()), l); :}
	/* let with initializing expression */
	| OBJECTID:n COLON TYPEID:t ASSIGN expr:i COMMA let:l
	    {: RESULT = new let(curr_lineno(), n, t, i, l); :}
	/* final (mandatory) identifier without initializing expression */
	| OBJECTID:n COLON TYPEID:t IN expr:b
	    {: RESULT = new let(curr_lineno(), n, t, new no_expr(curr_lineno()), b); :}
	/* final (mandatory) identifier with initializing expression */
	| OBJECTID:n COLON TYPEID:t ASSIGN expr:i IN expr:b
	    {: RESULT = new let(curr_lineno(), n, t, i, b); :}
	;

branches
	::= branch:e
	    {: RESULT = (new Cases(curr_lineno())).appendElement(e); :}
	| branches:el branch:e
	    {: RESULT = el.appendElement(e); :}
	;
branch
	::= OBJECTID:o COLON TYPEID:t DARROW expr:e SEMI
	    {: RESULT = new branch(curr_lineno(), o, t, e); :}
	;

block_expr_list
	/* block with a single expression */
	::= expr:e SEMI
	    {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	/* block with several expressions */
	| block_expr_list:el expr:e SEMI
	    {: RESULT = el.appendElement(e); :}
	;

actual
	::= /* empty */
	    {: RESULT = new Expressions(curr_lineno()); :}
	/* one */
	| expr:a
	    {: RESULT = (new Expressions(curr_lineno())).appendElement(a); :}
	/* many */
	| actual:al COMMA expr:a
	    {: RESULT = al.appendElement(a); :}
	;
