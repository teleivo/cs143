
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 18 06:12:11 CET 2025
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 18 06:12:11 CET 2025
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\004\005\000\002\005\002\000\002\005\003\000" +
    "\002\005\004\000\002\006\006\000\002\006\010\000\002" +
    "\006\014\000\002\013\002\000\002\013\003\000\002\013" +
    "\005\000\002\014\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\005\000" +
    "\002\007\004\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\004" +
    "\000\002\007\004\000\002\007\005\000\002\007\007\000" +
    "\002\007\004\000\002\007\007\000\002\007\011\000\002" +
    "\007\005\000\002\015\007\000\002\015\011\000\002\015" +
    "\007\000\002\015\011\000\002\012\003\000\002\012\004" +
    "\000\002\011\010\000\002\010\004\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\173\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\006\003\011\055\010\001\002\000" +
    "\006\011\014\050\013\001\002\000\004\043\012\001\002" +
    "\000\006\002\ufffb\004\ufffb\001\002\000\006\051\ufffa\056" +
    "\021\001\002\000\004\055\015\001\002\000\004\050\016" +
    "\001\002\000\006\051\ufffa\056\021\001\002\000\006\051" +
    "\ufff9\056\ufff9\001\002\000\006\051\166\056\021\001\002" +
    "\000\006\044\022\045\023\001\002\000\004\055\160\001" +
    "\002\000\010\042\ufff4\046\ufff4\056\025\001\002\000\006" +
    "\042\ufff3\046\ufff3\001\002\000\004\044\156\001\002\000" +
    "\006\042\027\046\030\001\002\000\004\056\025\001\002" +
    "\000\004\044\031\001\002\000\004\055\032\001\002\000" +
    "\004\050\033\001\002\000\036\007\042\012\051\017\034" +
    "\020\045\024\036\025\043\027\046\041\050\045\052\050" +
    "\035\052\040\053\037\054\041\056\044\001\002\000\036" +
    "\007\042\012\051\017\034\020\045\024\036\025\043\027" +
    "\046\041\050\045\052\050\035\052\040\053\037\054\041" +
    "\056\044\001\002\000\036\007\042\012\051\017\034\020" +
    "\045\024\036\025\043\027\046\041\050\045\052\050\035" +
    "\052\040\053\037\054\041\056\044\001\002\000\004\055" +
    "\142\001\002\000\046\005\uffee\006\uffee\010\uffee\014\uffee" +
    "\015\uffee\016\uffee\022\uffee\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\042\uffee\043\uffee\046\uffee" +
    "\051\uffee\001\002\000\046\005\uffef\006\uffef\010\uffef\014" +
    "\uffef\015\uffef\016\uffef\022\uffef\030\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\042\uffef\043\uffef\046" +
    "\uffef\051\uffef\001\002\000\046\005\ufff0\006\ufff0\010\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\022\ufff0\030\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\042\ufff0\043\ufff0" +
    "\046\ufff0\051\ufff0\001\002\000\036\007\042\012\051\017" +
    "\034\020\045\024\036\025\043\027\046\041\050\045\052" +
    "\050\035\052\040\053\037\054\041\056\044\001\002\000" +
    "\036\007\042\012\051\017\034\020\045\024\036\025\043" +
    "\027\046\041\050\045\052\050\035\052\040\053\037\054" +
    "\041\056\044\001\002\000\050\005\uffed\006\uffed\010\uffed" +
    "\014\uffed\015\uffed\016\uffed\022\uffed\026\131\030\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\042\uffed" +
    "\043\uffed\046\uffed\051\uffed\001\002\000\036\007\042\012" +
    "\051\017\034\020\045\024\036\025\043\027\046\041\050" +
    "\045\052\050\035\052\040\053\037\054\041\056\044\001" +
    "\002\000\036\007\042\012\051\017\034\020\045\024\036" +
    "\025\043\027\046\041\050\045\052\050\035\052\040\053" +
    "\037\054\041\056\044\001\002\000\022\030\061\032\060" +
    "\033\063\034\062\035\056\036\055\037\054\051\112\001" +
    "\002\000\036\007\042\012\051\017\034\020\045\024\036" +
    "\025\043\027\046\041\050\045\052\050\035\052\040\053" +
    "\037\054\041\056\044\001\002\000\004\056\074\001\002" +
    "\000\036\007\042\012\051\017\034\020\045\024\036\025" +
    "\043\027\046\041\050\045\052\050\035\052\040\053\037" +
    "\054\041\056\044\001\002\000\022\030\061\032\060\033" +
    "\063\034\062\035\056\036\055\037\054\046\057\001\002" +
    "\000\036\007\042\012\051\017\034\020\045\024\036\025" +
    "\043\027\046\041\050\045\052\050\035\052\040\053\037" +
    "\054\041\056\044\001\002\000\036\007\042\012\051\017" +
    "\034\020\045\024\036\025\043\027\046\041\050\045\052" +
    "\050\035\052\040\053\037\054\041\056\044\001\002\000" +
    "\036\007\042\012\051\017\034\020\045\024\036\025\043" +
    "\027\046\041\050\045\052\050\035\052\040\053\037\054" +
    "\041\056\044\001\002\000\046\005\uffec\006\uffec\010\uffec" +
    "\014\uffec\015\uffec\016\uffec\022\uffec\030\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\042\uffec\043\uffec" +
    "\046\uffec\051\uffec\001\002\000\036\007\042\012\051\017" +
    "\034\020\045\024\036\025\043\027\046\041\050\045\052" +
    "\050\035\052\040\053\037\054\041\056\044\001\002\000" +
    "\036\007\042\012\051\017\034\020\045\024\036\025\043" +
    "\027\046\041\050\045\052\050\035\052\040\053\037\054" +
    "\041\056\044\001\002\000\036\007\042\012\051\017\034" +
    "\020\045\024\036\025\043\027\046\041\050\045\052\050" +
    "\035\052\040\053\037\054\041\056\044\001\002\000\036" +
    "\007\042\012\051\017\034\020\045\024\036\025\043\027" +
    "\046\041\050\045\052\050\035\052\040\053\037\054\041" +
    "\056\044\001\002\000\046\005\uffe6\006\uffe6\010\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\022\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\042\uffe6\043\uffe6\046" +
    "\uffe6\051\uffe6\001\002\000\046\005\uffe5\006\uffe5\010\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\022\uffe5\030\uffe5\032\uffe5\033" +
    "\063\034\uffe5\035\056\036\uffe5\037\uffe5\042\uffe5\043\uffe5" +
    "\046\uffe5\051\uffe5\001\002\000\040\005\uffe9\006\uffe9\010" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\022\uffe9\032\060\033\063" +
    "\034\062\035\056\042\uffe9\043\uffe9\046\uffe9\051\uffe9\001" +
    "\002\000\046\005\uffe4\006\uffe4\010\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\022\uffe4\030\uffe4\032\uffe4\033\063\034\uffe4\035" +
    "\056\036\uffe4\037\uffe4\042\uffe4\043\uffe4\046\uffe4\051\uffe4" +
    "\001\002\000\046\005\uffe3\006\uffe3\010\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\022\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\042\uffe3\043\uffe3\046\uffe3\051" +
    "\uffe3\001\002\000\040\005\uffea\006\uffea\010\uffea\014\uffea" +
    "\015\uffea\016\uffea\022\uffea\032\060\033\063\034\062\035" +
    "\056\042\uffea\043\uffea\046\uffea\051\uffea\001\002\000\040" +
    "\005\uffe8\006\uffe8\010\uffe8\014\uffe8\015\uffe8\016\uffe8\022" +
    "\uffe8\032\060\033\063\034\062\035\056\042\uffe8\043\uffe8" +
    "\046\uffe8\051\uffe8\001\002\000\046\005\uffde\006\uffde\010" +
    "\uffde\014\uffde\015\uffde\016\uffde\022\uffde\030\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\042\uffde\043" +
    "\uffde\046\uffde\051\uffde\001\002\000\004\044\075\001\002" +
    "\000\004\055\076\001\002\000\010\010\100\026\101\042" +
    "\077\001\002\000\004\056\074\001\002\000\036\007\042" +
    "\012\051\017\034\020\045\024\036\025\043\027\046\041" +
    "\050\045\052\050\035\052\040\053\037\054\041\056\044" +
    "\001\002\000\036\007\042\012\051\017\034\020\045\024" +
    "\036\025\043\027\046\041\050\045\052\050\035\052\040" +
    "\053\037\054\041\056\044\001\002\000\024\010\103\030" +
    "\061\032\060\033\063\034\062\035\056\036\055\037\054" +
    "\042\104\001\002\000\036\007\042\012\051\017\034\020" +
    "\045\024\036\025\043\027\046\041\050\045\052\050\035" +
    "\052\040\053\037\054\041\056\044\001\002\000\004\056" +
    "\074\001\002\000\046\005\uffd9\006\uffd9\010\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\022\uffd9\030\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\042\uffd9\043\uffd9\046\uffd9" +
    "\051\uffd9\001\002\000\046\005\uffd7\006\uffd7\010\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\022\uffd7\030\061\032\060\033\063" +
    "\034\062\035\056\036\055\037\054\042\uffd7\043\uffd7\046" +
    "\uffd7\051\uffd7\001\002\000\046\005\uffd8\006\uffd8\010\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\022\uffd8\030\061\032\060\033" +
    "\063\034\062\035\056\036\055\037\054\042\uffd8\043\uffd8" +
    "\046\uffd8\051\uffd8\001\002\000\046\005\uffda\006\uffda\010" +
    "\uffda\014\uffda\015\uffda\016\uffda\022\uffda\030\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\042\uffda\043" +
    "\uffda\046\uffda\051\uffda\001\002\000\046\005\uffe7\006\uffe7" +
    "\010\uffe7\014\uffe7\015\uffe7\016\uffe7\022\uffe7\030\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\042\uffe7" +
    "\043\uffe7\046\uffe7\051\uffe7\001\002\000\004\043\113\001" +
    "\002\000\006\051\ufff5\056\ufff5\001\002\000\046\005\uffeb" +
    "\006\uffeb\010\uffeb\014\uffeb\015\uffeb\016\uffeb\022\uffeb\030" +
    "\061\032\060\033\063\034\062\035\056\036\055\037\054" +
    "\042\uffeb\043\uffeb\046\uffeb\051\uffeb\001\002\000\022\022" +
    "\116\030\061\032\060\033\063\034\062\035\056\036\055" +
    "\037\054\001\002\000\004\056\120\001\002\000\006\021" +
    "\130\056\120\001\002\000\004\043\122\001\002\000\006" +
    "\021\uffd6\056\uffd6\001\002\000\004\055\123\001\002\000" +
    "\004\023\124\001\002\000\036\007\042\012\051\017\034" +
    "\020\045\024\036\025\043\027\046\041\050\045\052\050" +
    "\035\052\040\053\037\054\041\056\044\001\002\000\022" +
    "\030\061\032\060\033\063\034\062\035\056\036\055\037" +
    "\054\043\126\001\002\000\006\021\uffd4\056\uffd4\001\002" +
    "\000\006\021\uffd5\056\uffd5\001\002\000\046\005\uffdf\006" +
    "\uffdf\010\uffdf\014\uffdf\015\uffdf\016\uffdf\022\uffdf\030\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\042" +
    "\uffdf\043\uffdf\046\uffdf\051\uffdf\001\002\000\036\007\042" +
    "\012\051\017\034\020\045\024\036\025\043\027\046\041" +
    "\050\045\052\050\035\052\040\053\037\054\041\056\044" +
    "\001\002\000\046\005\uffdb\006\uffdb\010\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\022\uffdb\030\061\032\060\033\063\034\062" +
    "\035\056\036\055\037\054\042\uffdb\043\uffdb\046\uffdb\051" +
    "\uffdb\001\002\000\046\005\uffe2\006\uffe2\010\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\022\uffe2\030\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\042\uffe2\043\uffe2\046\uffe2" +
    "\051\uffe2\001\002\000\022\016\135\030\061\032\060\033" +
    "\063\034\062\035\056\036\055\037\054\001\002\000\036" +
    "\007\042\012\051\017\034\020\045\024\036\025\043\027" +
    "\046\041\050\045\052\050\035\052\040\053\037\054\041" +
    "\056\044\001\002\000\022\005\137\030\061\032\060\033" +
    "\063\034\062\035\056\036\055\037\054\001\002\000\036" +
    "\007\042\012\051\017\034\020\045\024\036\025\043\027" +
    "\046\041\050\045\052\050\035\052\040\053\037\054\041" +
    "\056\044\001\002\000\022\006\141\030\061\032\060\033" +
    "\063\034\062\035\056\036\055\037\054\001\002\000\046" +
    "\005\uffdc\006\uffdc\010\uffdc\014\uffdc\015\uffdc\016\uffdc\022" +
    "\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\042\uffdc\043\uffdc\046\uffdc\051\uffdc\001\002\000" +
    "\046\005\uffe1\006\uffe1\010\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\022\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\042\uffe1\043\uffe1\046\uffe1\051\uffe1\001\002" +
    "\000\022\030\061\032\060\033\063\034\062\035\056\036" +
    "\055\037\054\043\150\001\002\000\040\007\042\012\051" +
    "\017\034\020\045\024\036\025\043\027\046\041\050\045" +
    "\052\050\035\051\146\052\040\053\037\054\041\056\044" +
    "\001\002\000\022\030\061\032\060\033\063\034\062\035" +
    "\056\036\055\037\054\043\147\001\002\000\046\005\uffe0" +
    "\006\uffe0\010\uffe0\014\uffe0\015\uffe0\016\uffe0\022\uffe0\030" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\042\uffe0\043\uffe0\046\uffe0\051\uffe0\001\002\000\040\007" +
    "\uffd2\012\uffd2\017\uffd2\020\uffd2\024\uffd2\025\uffd2\027\uffd2" +
    "\041\uffd2\045\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\056\uffd2\001\002\000\040\007\uffd3\012\uffd3\017\uffd3" +
    "\020\uffd3\024\uffd3\025\uffd3\027\uffd3\041\uffd3\045\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\001\002" +
    "\000\022\014\152\030\061\032\060\033\063\034\062\035" +
    "\056\036\055\037\054\001\002\000\036\007\042\012\051" +
    "\017\034\020\045\024\036\025\043\027\046\041\050\045" +
    "\052\050\035\052\040\053\037\054\041\056\044\001\002" +
    "\000\022\015\154\030\061\032\060\033\063\034\062\035" +
    "\056\036\055\037\054\001\002\000\046\005\uffdd\006\uffdd" +
    "\010\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd\030\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\042\uffdd" +
    "\043\uffdd\046\uffdd\051\uffdd\001\002\000\006\042\ufff2\046" +
    "\ufff2\001\002\000\004\055\157\001\002\000\006\042\ufff1" +
    "\046\ufff1\001\002\000\006\026\162\043\161\001\002\000" +
    "\006\051\ufff7\056\ufff7\001\002\000\036\007\042\012\051" +
    "\017\034\020\045\024\036\025\043\027\046\041\050\045" +
    "\052\050\035\052\040\053\037\054\041\056\044\001\002" +
    "\000\022\030\061\032\060\033\063\034\062\035\056\036" +
    "\055\037\054\043\164\001\002\000\006\051\ufff6\056\ufff6" +
    "\001\002\000\006\051\ufff8\056\ufff8\001\002\000\004\043" +
    "\167\001\002\000\006\002\ufffc\004\ufffc\001\002\000\006" +
    "\051\171\056\021\001\002\000\004\043\172\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\004\002\000\001\002" +
    "\000\006\002\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\010\002\004\003\003\004\005\001\001\000" +
    "\004\004\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\167\006\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\017\006\016\001" +
    "\001\000\002\001\001\000\004\006\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\025\014\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\046\001\001\000\004" +
    "\007\150\001\001\000\006\007\142\010\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\133\001\001\000\004\007\132\001" +
    "\001\000\002\001\001\000\004\007\114\001\001\000\004" +
    "\007\113\001\001\000\002\001\001\000\004\007\110\001" +
    "\001\000\004\015\072\001\001\000\004\007\052\001\001" +
    "\000\002\001\001\000\004\007\071\001\001\000\004\007" +
    "\070\001\001\000\004\007\067\001\001\000\002\001\001" +
    "\000\004\007\066\001\001\000\004\007\065\001\001\000" +
    "\004\007\064\001\001\000\004\007\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\107\001\001\000\004\007\106" +
    "\001\001\000\004\007\101\001\001\000\002\001\001\000" +
    "\004\007\105\001\001\000\004\015\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\120\012" +
    "\116\001\001\000\004\011\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\135\001\001\000\002\001\001\000\004\007" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {



    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // block_expr_list ::= block_expr_list expr SEMI 
            {
              Expressions RESULT =null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("block_expr_list",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // block_expr_list ::= expr SEMI 
            {
              Expressions RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("block_expr_list",6, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // branch ::= OBJECTID SEMI TYPEID DARROW expr SEMI 
            {
              branch RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new branch(curr_lineno(), o, t, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("branch",7, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // branches ::= branches branch 
            {
              Cases RESULT =null;
		Cases el = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		branch e = (branch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("branches",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // branches ::= branch 
            {
              Cases RESULT =null;
		branch e = (branch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("branches",8, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // let ::= OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              let RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), n, t, i, b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // let ::= OBJECTID COLON TYPEID IN expr 
            {
              let RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), n, t, new no_expr(curr_lineno()), b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // let ::= OBJECTID COLON TYPEID ASSIGN expr COMMA let 
            {
              let RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		let l = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), n, t, i, l); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // let ::= OBJECTID COLON TYPEID COMMA let 
            {
              let RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		let l = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), n, t, new no_expr(curr_lineno()), l); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let",11, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), n, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(), p, t, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new loop(curr_lineno(), p, b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= LET let 
            {
              Expression RESULT =null;
		let l = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= CASE expr OF branches ESAC 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases bs = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, bs); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LBRACE block_expr_list RBRACE 
            {
              Expression RESULT =null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(), el); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new new_(curr_lineno(), t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		AbstractSymbol e = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new object(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol e = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		AbstractSymbol e = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(), o, t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal",10, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formals ::= formals COMMA formal 
            {
              Formals RESULT =null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formals ::= formal 
            {
              Formals RESULT =null;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formals ::= 
            {
              Formals RESULT =null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals",9, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= OBJECTID LPAREN formals RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals fs = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), o, fs, t, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), n, t, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), n, t, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",4, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // features ::= features feature 
            {
              Features RESULT =null;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("features",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // features ::= feature 
            {
              Features RESULT =null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("features",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // features ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("features",3, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS error SEMI 
            {
              class_c RESULT =null;

              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE features RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE features RBRACE SEMI 
            {
              class_c RESULT =null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n,
		                   AbstractTable.idtable.addString("Object"),
				   f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

